" 
" https://github.com/yangyangwithgnu/use_vim_as_ide
" 

let mapleader=","   " 定义快捷键的前缀，即<Leader>

filetype on 	" 开启文件类型侦测
filetype plugin on 	" 根据侦测到的不同类型加载对应的插件

" set mouse=a       " 开启鼠标
" set mouse-=a	" 关闭鼠标

""" vim 内置功能快捷键 """
" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <Leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至vim
nmap <Leader>p "+p

" 设置快捷键遍历子窗口
" 依次遍历
nnoremap nw <C-W><C-W>
" 跳转至右方的窗口
" nnoremap <Leader>lw <C-W>l
nnoremap <C-l> <C-W>l
" 跳转至方的窗口
" nnoremap <Leader>hw <C-W>h
nnoremap <C-h> <C-W>h
" 跳转至上方的子窗口
" nnoremap <Leader>kw <C-W>k
nnoremap <C-k> <C-W>k
" 跳转至下方的子窗口
" nnoremap <Leader>jw <C-W>j
nnoremap <C-j> <C-W>j


set incsearch 	" 开启实时搜索功能
set ignorecase 	" 搜索时大小写不敏感
set nocompatible 	" 关闭兼容模式
set wildmenu 	" vim 自身命令行模式智能补全

" vundle 环境设置
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
" vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'vim-scripts/phd'

Plugin 'scrooloose/nerdtree'
Plugin 'Valloric/YouCompleteMe'
Plugin 'Lokaltog/vim-powerline'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'majutsushi/tagbar'	" 标签列表
Plugin 'dyng/ctrlsf.vim'	" 内容查找
Plugin 'scrooloose/nerdcommenter'  	" 快速注释
Plugin 'fholgado/minibufexpl.vim' 	" 多文档编辑
Plugin 'Yggdroot/indentLine' 	" 缩进指示线
Plugin 'lilydjwg/fcitx.vim' 	" 中英文状态切换
	
" 插件列表结束
call vundle#end()
filetype plugin indent on

" 配色方案
set background=dark
" colorscheme solarized
colorscheme molokai
" colorscheme phd


set laststatus=2  	" 总是显示状态栏
set ruler 	" 显示光标当前位置
set number 	" 开启行号显示
set cursorline 	" 高亮显示当前行/列
" set cursorcolumn
set hlsearch 	" 高亮显示搜索结果


" 设置状态栏主题风格
let g:Powerline_colorscheme='solarized256'


syntax enable 	" 开启语法高亮功能
syntax on 	" 允许用指定语法高亮配色方案替换默认方案
filetype indent on 	" 自适应不同语言的智能缩进
set expandtab 	" 将制表符扩展为空格
set tabstop=4 	" 设置编辑时制表符占用空格数
set shiftwidth=4 	" 设置格式化时制表符占用空格数
set softtabstop=4 	" 让 vim 把连续数量的空格视为一个制表符


" set foldmethod=indent 	" 基于缩进或语法进行代码折叠
set foldmethod=syntax
set nofoldenable 		" 启动 vim 时关闭折叠代码

" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
let tagbar_left=1 
" 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
nnoremap <Leader>tg :TagbarToggle<CR> 
let tagbar_width=32  	" 设置标签子窗口的宽度 
" let g:tagbar_compact=1 	" tagbar 子窗口中不显示冗余帮助信息 
" 设置 ctags 对哪些代码标识符生成标签

" 定义跳转
nnoremap <leader>gc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDefinition<CR>

" 使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list
nmap <Leader>fl :NERDTreeToggle<CR>
let NERDTreeWinSize=32 		" 设置NERDTree子窗口宽度
let NERDTreeWinPos="right"		" 设置NERDTree子窗口位置
let NERDTreeShowHidden=1		" 显示隐藏文件
" let NERDTreeMinimalUI=1		" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeAutoDeleteBuffer=1	" 删除文件时自动删除文件对应 buffer

" 使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键。快捷键速记法：search in project
nnoremap <Leader>sp :CtrlSF<CR>

""" YouCompleteMe """
" YCM 补全菜单配色
" highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5 	" 菜单
" highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900 	" 选中项
let g:ycm_complete_in_comments=1 	" 补全功能在注释中同样有效
let g:ycm_confirm_extra_conf=0 	" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_collect_identifiers_from_tags_files=1 		" 开启 YCM 标签补全引擎
set tags+=/data/misc/software/misc./vim/stdcpp.tags 	" 引入 C++ 标准库tags
inoremap <leader>; <C-x><C-o> 	" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
set completeopt-=preview 		" 补全内容不以分割子窗口形式出现，只显示补全列表
let g:ycm_min_num_of_chars_for_completion=1 	" 从第一个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0 		" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1 	" 语法关键字补全	


map <Leader>bl :MBEToggle<cr>		" 显示/隐藏 MiniBufExplorer 窗口
" buffer 切换快捷键
" map <C-Tab> :MBEbn<cr>	" 正向遍历
map <Leader>bn :MBEbn<cr>
" map <C-S-Tab> :MBEbp<cr>	" 逆向遍历
map <Leader>bp :MBEbp<cr>

" 环境恢复
" 设置环境保存项
set sessionoptions="blank,buffers,globals,localoptions,tabpages,sesdir,folds,help,options,resize,winpos,winsize"
set undodir=~/.undo_history/		" 保存 undo 历史
set undofile
" 保存快捷键
map <leader>ss :mksession! my.vim<cr> :wviminfo! my.viminfo<cr>
" 恢复快捷键
map <leader>rs :source my.vim<cr> :rviminfo my.viminfo<cr>

" 关闭行号，方便鼠标复制
map <F2> :set nonu<cr>

" 内置快捷键
" Press Ctrl-O to jump back to the previous (older) location.
" Press Ctrl-I (same as Tab) to jump forward to the next (newer) location.
" :jumps  " Display the jump list for the current window
"
" 插件快捷键
" <leader>cc，注释当前选中文本
" <leader>cu，取消选中文本块的注释





